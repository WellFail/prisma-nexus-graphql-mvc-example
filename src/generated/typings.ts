/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "../graphql/context"





declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateAccountInput: { // input type
    currency: NexusGenEnums['AccountCurrency']; // AccountCurrency!
    name: string; // String!
    userId: string; // String!
  }
  CreateUserInput: { // input type
    email: string; // String!
    firstName?: string | null; // String
    lastName?: string | null; // String
    middleName?: string | null; // String
    password: string; // String!
    roles: NexusGenEnums['UserRole'][]; // [UserRole!]!
  }
  SignUpInput: { // input type
    email: string; // String!
    firstName?: string | null; // String
    lastName?: string | null; // String
    password: string; // String!
  }
}

export interface NexusGenEnums {
  AccountCurrency: "EUR" | "RUB" | "USD"
  UserRole: "ADMIN" | "EMPLOYEE"
}

export interface NexusGenRootTypes {
  Account: { // root type
    currency?: NexusGenEnums['AccountCurrency'] | null; // AccountCurrency
    id?: string | null; // ID
    name?: string | null; // String
  }
  AuthPayload: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: {};
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
    roles?: NexusGenEnums['UserRole'][] | null; // [UserRole!]
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  CreateAccountInput: NexusGenInputs['CreateAccountInput'];
  CreateUserInput: NexusGenInputs['CreateUserInput'];
  SignUpInput: NexusGenInputs['SignUpInput'];
  AccountCurrency: NexusGenEnums['AccountCurrency'];
  UserRole: NexusGenEnums['UserRole'];
}

export interface NexusGenFieldTypes {
  Account: { // field return type
    currency: NexusGenEnums['AccountCurrency'] | null; // AccountCurrency
    id: string | null; // ID
    name: string | null; // String
  }
  AuthPayload: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: { // field return type
    createAccount: NexusGenRootTypes['Account'] | null; // Account
    createUser: NexusGenRootTypes['User'] | null; // User
    signUp: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
  }
  Query: { // field return type
    accounts: NexusGenRootTypes['Account'][] | null; // [Account!]
    users: NexusGenRootTypes['User'][] | null; // [User!]
  }
  User: { // field return type
    accounts: NexusGenRootTypes['Account'][] | null; // [Account!]
    email: string | null; // String
    id: string | null; // ID
    name: string | null; // String
    roles: NexusGenEnums['UserRole'][] | null; // [UserRole!]
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createAccount: { // args
      data: NexusGenInputs['CreateAccountInput']; // CreateAccountInput!
    }
    createUser: { // args
      data: NexusGenInputs['CreateUserInput']; // CreateUserInput!
    }
    signUp: { // args
      data: NexusGenInputs['SignUpInput']; // SignUpInput!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Account" | "AuthPayload" | "Mutation" | "Query" | "User";

export type NexusGenInputNames = "CreateAccountInput" | "CreateUserInput" | "SignUpInput";

export type NexusGenEnumNames = "AccountCurrency" | "UserRole";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}